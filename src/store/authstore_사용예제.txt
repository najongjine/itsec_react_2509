// src/App.tsx

import React from 'react';
import { useAuthStore } from './stores/authStore';
import type { UserInfoType } from './types/global_types'; // 가정한 타입 경로

// --- 1. 사용자 정보를 표시하는 컴포넌트 (Store 상태 읽기) ---
const UserProfile: React.FC = () => {
  // `selectIsLoggedIn` 셀렉터를 사용하여 로그인 여부를 효율적으로 확인
  const isLoggedIn = useAuthStore((state) => state.userInfo !== null); 
  const userInfo = useAuthStore((state) => state.userInfo);
  
  if (!isLoggedIn || !userInfo) {
    return (
      <div style={{ padding: '15px', border: '1px solid #ccc', borderRadius: '5px' }}>
        <h3>👤 사용자 프로필</h3>
        <p>로그아웃 상태입니다.</p>
      </div>
    );
  }

  return (
    <div style={{ padding: '15px', border: '1px solid #007bff', borderRadius: '5px', marginTop: '20px' }}>
      <h3>✅ 로그인된 사용자 정보</h3>
      <p>UID: **{userInfo.uidVarchar}**</p>
      <p>이름: **{userInfo.displayName}** ({userInfo.realName})</p>
      <p>이메일: **{userInfo.emailVarchar}**</p>
      <p>토큰 (길이): {userInfo.token.length}</p>
    </div>
  );
};

// --- 2. 로그인/로그아웃을 처리하는 컴포넌트 (Store 액션 호출) ---
const LoginComponent: React.FC = () => {
  // 상태와 액션을 스토어에서 한 번에 가져오기
  const { userInfo, login, logout } = useAuthStore();
  const isLoggedIn = userInfo !== null;

  // 더미 로그인 정보 생성 함수 (실제로는 Firebase 로그인 결과 + 서버 DB 정보)
  const getDummyUserInfo = (): UserInfoType => ({
    id: 101,
    username: 'fire_user_1',
    createdDt: new Date().toISOString(),
    updatedDt: new Date().toISOString(),
    realName: '김개발',
    profileUrl: 'https://example.com/p/kim',
    uidVarchar: 'google-firebase-uid-abc123xyz', // Firebase UID
    emailVarchar: 'kim.dev@google.com',
    displayName: 'Kim Dev',
    providerId: 'google.com',
    metadata: '{"lastSignInTime":"..."}',
    token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJmaXJlYmFzZS11aWQtYWJjMTIzeHl6IiwiaWF0IjoxNjQyMjAxMjAwfQ.SFlU6F0L4pYQ7a', // 더미 JWT
  });

  const handleLogin = () => {
    const newUser = getDummyUserInfo();
    login(newUser, newUser.token); // 로그인 액션 호출
    alert('로그인 성공! 상태가 Zustand에 저장되었습니다.');
  };

  const handleLogout = () => {
    logout(); // 로그아웃 액션 호출
    alert('로그아웃 성공! 상태가 로컬 스토리지에서 제거되었습니다.');
  };

  return (
    <div style={{ marginTop: '30px' }}>
      {isLoggedIn ? (
        <button 
          onClick={handleLogout} 
          style={{ padding: '10px 20px', backgroundColor: '#dc3545', color: 'white', border: 'none', cursor: 'pointer' }}
        >
          👋 로그아웃
        </button>
      ) : (
        <button 
          onClick={handleLogin} 
          style={{ padding: '10px 20px', backgroundColor: '#28a745', color: 'white', border: 'none', cursor: 'pointer' }}
        >
          🔑 Google 로그인 시뮬레이션
        </button>
      )}
    </div>
  );
};

// --- 3. 메인 앱 레이아웃 ---
const App: React.FC = () => {
  return (
    <div style={{ fontFamily: 'Arial, sans-serif', padding: '40px', maxWidth: '600px', margin: '0 auto' }}>
      <h1>Zustand Auth Store 예제</h1>
      <LoginComponent />
      <UserProfile />
    </div>
  );
};

export default App;